name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        kotlin_version: [1.5.0, 1.5.10, 1.5.20, 1.5.21, 1.5.30, 1.5.31, 1.5.32, 1.6.0, 1.6.10, 1.6.20, 1.6.21, 1.7.0, 1.7.10]
        os: [ubuntu-latest, macos-latest]
        compose_version: [1.0.0-alpha04, 1.0.0-beta07, 1.0.1, 1.1.0, 1.1.1]
    env:
      kotlin_version: ${{ matrix.kotlin_version }}
      compose_version: ${{ matrix.compose_version }}
    steps:  
      - uses: actions/checkout@v3
      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - if: always()
        run: echo '${{ toJSON(matrix) }}' > ./matrix.txt
      - if: always()
        id: generate-unique-id
        run: echo '::set-output name=result::${{ hashFiles('./matrix.txt') }}'
      - id: build
        name: Build with Gradle
        shell: bash
        run: |
          RESULT=`./gradlew bundleDebug --profile | grep "BUILD SUCCESSFUL in " | sed -e 's/^[^dm"]* //'`
          echo "::set-output name=duration::${RESULT}"
      - if: always()
        id: generate-outputs
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const id = "${{ steps.generate-unique-id.outputs.result }}"
            const matrix = ${{ toJSON(matrix) }}
            const status = "${{ job.status }}"
            const exportedValues = "${{ steps.build.outputs.duration }}"
            const outputs = { matrix, status, id, exportedValues }
            fs.writeFileSync("${{ github.workspace }}/outputs.txt", JSON.stringify(outputs))
      - if: always()
        uses: actions/upload-artifact@v2
        with:
          name: outputs-${{ steps.generate-unique-id.outputs.result }}
          # path: ${{ github.workspace }}/outputs.txt
          path: outputs.txt
  after-matrix-job:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: matrix-job-outputs
      - uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const path = require('path')
            const directory = path.resolve('./matrix-job-outputs')
              
            const matchedOutputs = [[{data: 'version', header:true}, {data: 'os', header:true}, {data: 'result', header: true}]]

            const linuxOutputs = [[{data: 'version', header:true}, {data: 'result', header: true}]]
            const macosOutputs = [[{data: 'version', header:true}, {data: 'result', header: true}]]

            for (const dirName of fs.readdirSync(directory)) {
              const filePath = path.join(directory, dirName, 'outputs.txt')
              const outputs = JSON.parse(fs.readFileSync(filePath))
              matchedOutputs.push([outputs.matrix.kotlin_version, outputs.matrix.os, outputs.exportedValues])

              if(outputs.matrix.os == 'ubuntu-latest'){
                linuxOutputs.push([outputs.matrix.kotlin_version, outputs.exportedValues])
              }else if(outputs.matrix.os == 'macos-latest'){
                macosOutputs.push([outputs.matrix.kotlin_version, outputs.exportedValues])
              }
            }
            await core.summary
              .addTable(matchedOutputs)
              .write()

            await core.summary
              .addTable(linuxOutputs)
              .write()

            await core.summary
              .addTable(macosOutputs)
              .write()